// Generated by `wit-bindgen` 0.39.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.InteropServices;

namespace ImportsWorld.wit.imports.wasi.sockets.v0_2_1
{
    public static class TcpCreateSocketInterop {

        internal static class CreateTcpSocketWasmInterop
        {
            [DllImport("wasi:sockets/tcp-create-socket@0.2.1", EntryPoint = "create-tcp-socket"), WasmImportLinkage]
            internal static extern void wasmImportCreateTcpSocket(int p0, nint p1);
        }

        public  static unsafe global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket CreateTcpSocket(global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddressFamily addressFamily)
        {

            var retArea = stackalloc uint[2+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            CreateTcpSocketWasmInterop.wasmImportCreateTcpSocket((int)addressFamily, ptr);

            Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode> lifted;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {
                    var resource = new global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket(new global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))));

                    lifted = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.Ok(resource);
                    break;
                }
                case 1: {

                    lifted = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.ITcp.TcpSocket, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.Err((global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode)new Span<byte>((void*)(ptr + 4), 1)[0]);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted.IsOk)
            {
                var tmp = lifted.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>(lifted.AsErr!, 0);
            }

        }

    }
}
